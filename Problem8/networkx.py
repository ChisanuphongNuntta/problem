# -*- coding: utf-8 -*-
"""NetworkX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ppo7ZaIGVQVm6UyASAi1ZQLAEr2CQtSA
"""

import matplotlib.pyplot as plt
import networkx as nx

G = nx.dodecahedral_graph()
nx.draw(G)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.dodecahedral_graph()

nx.draw(G, with_labels=True,font_color="yellow",node_size= 1000)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()

G.add_node('A')
G.add_edge('B',"C")

nx.draw(G, with_labels=True,font_color="yellow",node_size= 2000)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edge('man',"baby",weight=1)
G.add_edge("baby",'women',weight=0.5)
G.add_edge('man',"women",weight=0.3)
G.add_edge('women',"year",weight=1)
G.add_edge('year',"man",weight=1)


nx.draw(G, with_labels=True,font_color="yellow",node_size= 2000)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edge('man',"baby",weight=1)
G.add_edge("baby",'women',weight=0.5)
G.add_edge('man',"women",weight=0.3)
G.add_edge('women',"year",weight=1)
G.add_edge('year',"man",weight=1)

edge_labels = nx.get_edge_attributes(G,'weight')
print(edge_labels)

pos = nx.spring_layout(G)
nx.draw(G,pos ,with_labels=True,font_color="yellow",node_size= 2000)
nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edge('man',"baby",weight=1)
G.add_edge("baby",'women',weight=0.5)
G.add_edge('man',"women",weight=0.3)
G.add_edge('women',"year",weight=1)
G.add_edge('year',"man",weight=1)

print('Shortest path from baby to man is :' , 
    nx.shortest_path(G,source='baby',target='man',weight='weight'))
print('Shortest path from baby to man is :' , 
    nx.shortest_path_length(G,source='baby',target='man',weight='weight'))


edge_labels = nx.get_edge_attributes(G,'weight')
print(edge_labels)

pos = nx.spring_layout(G)
nx.draw(G,pos ,with_labels=True,font_color="yellow",node_size= 2000)
nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edge('man',"baby",weight=1)
G.add_edge("baby",'women',weight=0.5)
G.add_edge('man',"women",weight=0.3)
G.add_edge('women',"year",weight=1)
G.add_edge('year',"man",weight=1)

final_avg = 999999999.99
final_key = ''

node_allSP = dict(nx.shortest_path_length(G,weight='weight'))
print(node_allSP)
for key in node_allSP:
    avg_nodeSP = sum(node_allSP[key].values())/(len(node_allSP[key])-1)
    print('AverageSP to all nodes of :',key,' is ',avg_nodeSP)
    if final_avg> avg_nodeSP:
        final_avg = avg_nodeSP
        final_key = key

print('The centroid is :',final_key,'the length is ',final_avg)


edge_labels = nx.get_edge_attributes(G,'weight')
pos = nx.spring_layout(G)
nx.draw(G,pos ,with_labels=True,font_color="yellow",node_size= 2000)
nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edges_from([('A','B'),('A','M'),('A','L'),('B','C'),('B','D'),
                  ('B','N'),('B','O'),('C','D'),('D','E'),('D','O'),
                  ('E','F'),('F','G'),('F','N'),('G','H'),('H','N'),
                  ('H','I'),('H','P'),('P','O'),('P','I'),('P','M'),
                  ('I','J'),('J','K'),('K','M'),('K','L')])

print('Shortest path from E to L is :',
      nx.shortest_path(G, source='E', target='L'))

final_avg = 999999999.99
final_key = ''

node_allSP = dict(nx.shortest_path_length(G,weight='weight'))
print(node_allSP)
for key in node_allSP:
    avg_nodeSP = sum(node_allSP[key].values())/(len(node_allSP[key])-1)
    print('AverageSP to all nodes of :',key,' is ',avg_nodeSP)
    if final_avg> avg_nodeSP:
        final_avg = avg_nodeSP
        final_key = key

print('The centroid is :',final_key,'the length is ',final_avg)


nx.draw(G ,with_labels=True,font_color="yellow",node_size= 1500)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()


G.add_edges_from([('A','B'),('A','M'),('A','L'),('B','C'),('B','D'),
                  ('B','N'),('B','O'),('C','D'),('D','E'),('D','O'),
                  ('E','F'),('F','G'),('F','N'),('G','H'),('H','N'),
                  ('H','I'),('H','P'),('P','O'),('P','I'),('P','M'),
                  ('I','J'),('J','K'),('K','M'),('K','L')])

print('Shortest path from E to L is :',
    nx.shortest_path(G,source='E',target='L'))

print('A neighbors')
Alist = nx.all_neighbors(G,'A')
for k in Alist:
    print(k)

print('E neighbors')
Elist = nx.all_neighbors(G,'E')
for k in Elist:
    print(k)

print('I neighbors')
Ilist = nx.all_neighbors(G,'I')
for k in Alist:
    print(k)

print("Shortset path from O to A is : ",
    nx.shortest_path_length(G,source='O',target='A'))